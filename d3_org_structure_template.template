
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>UC Organizational Structure</title>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #container {
            /* width: 1800px;
            height: 5000px; */
            overflow: auto;
            padding-top: 150px
        }
        #header {
            position: fixed;
            top: 0;
            left: 0;
            padding-left: 10px;
            height: 150px;
            width: 100%;
            background-color: #fff;
            z-index: 1000;
        }
        .node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 3px;
        }
        .node text {
            font: 12px sans-serif;
        }
        .link {
            fill: none;
            stroke: #ccc;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <div id="header">
        <h1>UC Organizational Structure</h1>
        <p>Click on the nodes to expand or collapse them. <span style="color: red">Red</span> circles indicate that this org unit is not linked to any exported JADE entities (see <a href="https://dev.azure.com/uc-digital/Digital%20Services/_workitems/edit/54761">this ADO case</a> for more details)</p>
        <button id="expandAll">Expand All</button>
        <button id="collapseAll">Collapse All</button>
        <button id="hideUnusedNodes">Hide Unused Nodes</button>
        <button id="showAllNodes">Show All Nodes</button>
    </div>
    <div id="container">
    </div>
    <script>
        var headerHeight = 120;
        var treeData = {{ tree_data }};
        var originalData = JSON.parse(JSON.stringify(treeData));

        // Initialize the SVG dimensions and viewBox
        var svgWidth = 1700;  // Replace with actual SVG width
        var svgHeight = 11000;  // Replace with actual SVG height
        var divHeight = 5000;  // Replace with actual div height
        var initialMinY = 6120; // Takes into account how the tree will expand
        var initialExpandedHeight = 600; // Initial height of the expanded tree showing levels 1-2
        var nodeDepth = 340; // Depth of each node in the tree

        // Create the SVG element and set its viewBox
        var margin = {top: 20, right: 90, bottom: 30, left: 90},
            width = svgWidth - margin.left - margin.right,
            height = svgHeight - margin.top - margin.bottom;

        var svg = d3.select("#container").append("svg")
            .style("position", "absolute")
            .style("top", "200px")
            .style("border", "1px solid black")
            .attr("id", "svg_tree")
            .attr("width", svgWidth)
            .attr("height", svgHeight)
            .attr("viewBox", [0, 0, svgWidth, svgHeight])
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + initialMinY + ")");

        var i = 0,
            duration = 750,
            root;

        document.getElementById("container").scrollTop = height / 2;

        var treemap = d3.tree().size([height, width]);
        treemap.nodeSize([25, 25]);
        root = d3.hierarchy(treeData[0], function(d) { return d.children; });
        root.x0 = height / 2;
        root.y0 = -height / 2;

        if (root.children) {
            root.children.forEach(collapse);
        }

        update(root);

        // Function to recursively expand nodes
        function expand(d) {
          if (d._children) {
            d.children = d._children;
            d.children.forEach(expand);
            d._children = null;
          }
        }

        function collapse(d) {
            if(d.children) {
                d._children = d.children;
                d._children.forEach(collapse);
                d.children = null;
            }
        }
        function click(d) {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            update(d);
        }
        function diagonal(s, d) {
            path = `M ${s.y} ${s.x}
                    C ${(s.y + d.y) / 2} ${s.x},
                      ${(s.y + d.y) / 2} ${d.x},
                      ${d.y} ${d.x}`
            return path;
        }

        function hideUnusedNodes() {
            function filterData(d) {
                var used = typeof d.used === 'undefined' ? true : d.used;
                if (!used) return null;
                var children = (d.children || []).map(filterData).filter(Boolean);
                return Object.assign({}, d, {children: children.length ? children : null});
            }

            var filteredData = filterData(originalData[0]);

            root = d3.hierarchy(filteredData);
            root.x0 = height / 2;
            root.y0 = 0;
            update(root);
        }

        function showAllNodes() {
            root = d3.hierarchy(originalData[0]);
            root.x0 = height / 2;
            root.y0 = 0;
            update(root);
        }

        // Event listener for "Expand All" button
        d3.select("#expandAll").on("click", function() {
          root.children.forEach(expand);
          update(root);
        });

        // Event listener for "Collapse All" button
        d3.select("#collapseAll").on("click", function() {
          root.children.forEach(collapse);
          update(root);
        });

        // Event listener for "Hide Unused" button
        d3.select("#hideUnusedNodes").on("click", function() {
          hideUnusedNodes();
        });

        // Event listener for "Show All Nodes" button
        d3.select("#showAllNodes").on("click", function() {
          showAllNodes();
        });

        function update(source) {
            var treeData = treemap(root);
            var nodes = treeData.descendants(),
                links = treeData.descendants().slice(1);
            nodes.forEach(function(d){ d.y = d.depth * nodeDepth;});
            var node = svg.selectAll('g.node')
                .data(nodes, function(d) {return d.id || (d.id = ++i); });
            var nodeEnter = node.enter().append('g')
                .attr('class', 'node')
                .attr("transform", function(d) {
                    return "translate(" + source.y0 + "," + source.x0 + ")";
                })
                .on('click', click);

            nodeEnter.append('circle')
                .attr('class', 'node')
                .attr('r', 1e-6)
                .style("stroke", function(d) {
                    // Check the "used" property and return color
                    return d.data.used ? "black" : "red";
                })
                .style("fill", function(d) {
                    // Check if the node has children and return color
                    return d._children ? "lightsteelblue" : "#fff";
                });
            nodeEnter.append('text')
                .attr("dy", ".35em")
                .attr("x", function(d) {
                    return d.children || d._children ? -13 : 13;
                })
                .attr("text-anchor", function(d) {
                    return d.children || d._children ? "end" : "start";
                })
                .text(function(d) { return d.data.name + " (" + d.data.course_counts + ")"; });
            var nodeUpdate = nodeEnter.merge(node);
            nodeUpdate.transition()
                .duration(duration)
                .attr("transform", function(d) {
                    return "translate(" + d.y + "," + d.x + ")";
                });
            nodeUpdate.select('circle.node')
                .attr('r', 10)
                .style("stroke", function(d) {
                    // Check the "used" property and return color
                    return d.data.used ? "black" : "red";
                })
                .style("fill", function(d) {
                    // Check if the node has children and return color
                    return d._children ? "lightsteelblue" : "#fff";
                })
                .attr('cursor', 'pointer');

            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function(d) {
                    return "translate(" + source.y + "," + (source.x + (d.x + height / 2 - root.x)) + ")";
                })
                .remove();
            nodeExit.select('circle')
                .attr('r', 1e-6);
            nodeExit.select('text')
                .style('fill-opacity', 1e-6);
            var link = svg.selectAll('path.link')
                .data(links, function(d) { return d.id; });
            var linkEnter = link.enter().insert('path', "g")
                .attr("class", "link")
                .attr('d', function(d){
                    var o = {x: source.x0, y: source.y0};
                    return diagonal(o, o);
                });
            var linkUpdate = linkEnter.merge(link);
            linkUpdate.transition()
                .duration(duration)
                .attr('d', function(d){ return diagonal(d, d.parent); });
            var linkExit = link.exit().transition()
                .duration(duration)
                .attr('d', function(d) {
                    var o = {x: source.x, y: source.y};
                    return diagonal(o, o);
                })
                .remove();
            nodes.forEach(function(d){
                d.x0 = d.x;
                d.y0 = d.y;
            });

            // Recompute the bounds of the SVG container
            var x_min = d3.min(nodes, function(d) { return d.x; });
            var x_max = d3.max(nodes, function(d) { return d.x; });
            var y_min = d3.min(nodes, function(d) { return d.y; });
            var y_max = d3.max(nodes, function(d) { return d.y; });

            svg.attr("width", y_max - y_min + margin.left + margin.right);
            svg.attr("height", x_max - x_min + margin.top + margin.bottom);

            // Scroll the window to the top of the initial tree
            document.addEventListener('DOMContentLoaded', (event) => {
                window.scrollTo(0, initialMinY - initialExpandedHeight * 0.5);  // Half of the div height
            });
        }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.min.js"></script>
</body>
</html>
